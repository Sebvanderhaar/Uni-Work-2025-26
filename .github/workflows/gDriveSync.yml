name: Sync PDFs to Google Drive   # A friendly name for your workflow

on:                               # Triggers that run this workflow
  push:                           # Run on push events
    branches:
      - main                      # Replace with your branch (e.g., "master" or "dev")

jobs:                             # Workflows consist of jobs
  upload-to-drive:                # Name of the job
    runs-on: ubuntu-latest        # Runner environment (a Linux VM)

    steps:                        # The actual tasks
      - name: Checkout repo       # Step 1: Get your repo files
        uses: actions/checkout@v3

      - name: Set up Python       # Step 2: Prepare Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies  # Step 3: Install needed Python packages
        run: |
          python -m pip install --upgrade pip
          pip install pydrive2

      - name: Upload PDFs to Google Drive
        env:
          GDRIVE_SERVICE_ACCOUNT: ${{ secrets.GDRIVE_SERVICE_ACCOUNT }}
          GDRIVE_FOLDER_ID: ${{ vars.GDRIVE_FOLDER_ID }}
        run: |
          python <<EOF
          import os, json, sys
          from pydrive2.auth import GoogleAuth
          from pydrive2.drive import GoogleDrive
          from oauth2client.service_account import ServiceAccountCredentials

          # Load credentials from secret
          creds_json = json.loads(os.environ["GDRIVE_SERVICE_ACCOUNT"])
          scope = ["https://www.googleapis.com/auth/drive"]
          credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)

          gauth = GoogleAuth()
          gauth.credentials = credentials
          drive = GoogleDrive(gauth)

          folder_id = os.environ["GDRIVE_FOLDER_ID"]
          print(f"🔎 Checking access to folder: {folder_id}")

          try:
              folder = drive.CreateFile({'id': folder_id})
              folder.FetchMetadata(fields='title')
              print(f"✅ Service account can access folder: {folder['title']}")
          except Exception as e:
              print(f"❌ Could not access folder ID {folder_id}")
              print("👉 Make sure:")
              print("   1. The folder ID is correct (just the ID, not the whole URL)")
              print("   2. The service account email has Editor access to that folder")
              sys.exit(1)

          # Upload PDFs
          for root, dirs, files in os.walk("."):
              for file in files:
                  if file.endswith(".pdf"):
                      filepath = os.path.join(root, file)
                      gfile = drive.CreateFile({
                          "title": file,
                          "parents": [{"id": folder_id}]
                      })
                      gfile.SetContentFile(filepath)
                      gfile.Upload()
                      print(f"✅ Uploaded {filepath}")
          EOF

